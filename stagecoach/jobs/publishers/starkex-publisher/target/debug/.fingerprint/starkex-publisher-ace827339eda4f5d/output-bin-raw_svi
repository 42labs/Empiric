{"message":"the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/raw_svi.rs","byte_start":1763,"byte_end":1777,"line_start":63,"line_end":63,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":34,"highlight_end":48}],"label":"the trait `argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/raw_svi.rs","byte_start":1747,"byte_end":1762,"line_start":63,"line_end":63,"column_start":18,"column_end":33,"is_primary":false,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":18,"highlight_end":33}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `argmin_math::ArgminAdd<T, U>`:\n  <Vec<Vec<f32>> as argmin_math::ArgminAdd<Vec<Vec<f32>>, Vec<Vec<f32>>>>\n  <Vec<Vec<f32>> as argmin_math::ArgminAdd<f32, Vec<Vec<f32>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminAdd<Vec<Vec<f64>>, Vec<Vec<f64>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminAdd<f64, Vec<Vec<f64>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminAdd<Vec<Vec<i16>>, Vec<Vec<i16>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminAdd<i16, Vec<Vec<i16>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminAdd<Vec<Vec<i32>>, Vec<Vec<i32>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminAdd<i32, Vec<Vec<i32>>>>\nand 76 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `NelderMead::<P, F>::new`","code":null,"level":"note","spans":[{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs","byte_start":2736,"byte_end":2751,"line_start":80,"line_end":80,"column_start":16,"column_end":31,"is_primary":true,"text":[{"text":"    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,","highlight_start":16,"highlight_end":31}],"label":"required by this bound in `NelderMead::<P, F>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/raw_svi.rs:63:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let solver = NelderMead::new(initial_params\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `argmin_math::ArgminAdd<T, U>`:\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminAdd<Vec<Vec<f32>>, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminAdd<f32, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminAdd<Vec<Vec<f64>>, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminAdd<f64, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminAdd<Vec<Vec<i16>>, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminAdd<i16, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminAdd<Vec<Vec<i32>>, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminAdd<i32, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m           and 76 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `NelderMead::<P, F>::new`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs:80:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `NelderMead::<P, F>::new`\u001b[0m\n\n"}
{"message":"the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/raw_svi.rs","byte_start":1763,"byte_end":1777,"line_start":63,"line_end":63,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":34,"highlight_end":48}],"label":"the trait `argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/raw_svi.rs","byte_start":1747,"byte_end":1762,"line_start":63,"line_end":63,"column_start":18,"column_end":33,"is_primary":false,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":18,"highlight_end":33}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `argmin_math::ArgminSub<T, U>`:\n  <Vec<Vec<f32>> as argmin_math::ArgminSub<Vec<Vec<f32>>, Vec<Vec<f32>>>>\n  <Vec<Vec<f32>> as argmin_math::ArgminSub<f32, Vec<Vec<f32>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminSub<Vec<Vec<f64>>, Vec<Vec<f64>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminSub<f64, Vec<Vec<f64>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminSub<Vec<Vec<i16>>, Vec<Vec<i16>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminSub<i16, Vec<Vec<i16>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminSub<Vec<Vec<i32>>, Vec<Vec<i32>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminSub<i32, Vec<Vec<i32>>>>\nand 136 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `NelderMead::<P, F>::new`","code":null,"level":"note","spans":[{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs","byte_start":2754,"byte_end":2769,"line_start":80,"line_end":80,"column_start":34,"column_end":49,"is_primary":true,"text":[{"text":"    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,","highlight_start":34,"highlight_end":49}],"label":"required by this bound in `NelderMead::<P, F>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/raw_svi.rs:63:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let solver = NelderMead::new(initial_params\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `argmin_math::ArgminSub<T, U>`:\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminSub<Vec<Vec<f32>>, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminSub<f32, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminSub<Vec<Vec<f64>>, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminSub<f64, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminSub<Vec<Vec<i16>>, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminSub<i16, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminSub<Vec<Vec<i32>>, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminSub<i32, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m           and 136 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `NelderMead::<P, F>::new`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs:80:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `NelderMead::<P, F>::new`\u001b[0m\n\n"}
{"message":"the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/bin/raw_svi.rs","byte_start":1763,"byte_end":1777,"line_start":63,"line_end":63,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":34,"highlight_end":48}],"label":"the trait `argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/raw_svi.rs","byte_start":1747,"byte_end":1762,"line_start":63,"line_end":63,"column_start":18,"column_end":33,"is_primary":false,"text":[{"text":"    let solver = NelderMead::new(initial_params","highlight_start":18,"highlight_end":33}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `argmin_math::ArgminMul<T, U>`:\n  <Vec<Vec<f32>> as argmin_math::ArgminMul<Vec<Vec<f32>>, Vec<Vec<f32>>>>\n  <Vec<Vec<f32>> as argmin_math::ArgminMul<f32, Vec<Vec<f32>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminMul<Vec<Vec<f64>>, Vec<Vec<f64>>>>\n  <Vec<Vec<f64>> as argmin_math::ArgminMul<f64, Vec<Vec<f64>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminMul<Vec<Vec<i16>>, Vec<Vec<i16>>>>\n  <Vec<Vec<i16>> as argmin_math::ArgminMul<i16, Vec<Vec<i16>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminMul<Vec<Vec<i32>>, Vec<Vec<i32>>>>\n  <Vec<Vec<i32>> as argmin_math::ArgminMul<i32, Vec<Vec<i32>>>>\nand 160 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `NelderMead::<P, F>::new`","code":null,"level":"note","spans":[{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs","byte_start":2772,"byte_end":2787,"line_start":80,"line_end":80,"column_start":52,"column_end":67,"is_primary":true,"text":[{"text":"    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,","highlight_start":52,"highlight_end":67}],"label":"required by this bound in `NelderMead::<P, F>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/raw_svi.rs:63:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let solver = NelderMead::new(initial_params\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>` is not implemented for `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `argmin_math::ArgminMul<T, U>`:\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminMul<Vec<Vec<f32>>, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f32>> as argmin_math::ArgminMul<f32, Vec<Vec<f32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminMul<Vec<Vec<f64>>, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<f64>> as argmin_math::ArgminMul<f64, Vec<Vec<f64>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminMul<Vec<Vec<i16>>, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i16>> as argmin_math::ArgminMul<i16, Vec<Vec<i16>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminMul<Vec<Vec<i32>>, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m             <Vec<Vec<i32>> as argmin_math::ArgminMul<i32, Vec<Vec<i32>>>>\u001b[0m\n\u001b[0m           and 160 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `NelderMead::<P, F>::new`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/argmin-0.8.1/src/solver/neldermead/mod.rs:80:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    P: Clone + ArgminAdd<P, P> + ArgminSub<P, P> + ArgminMul<F, P>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `NelderMead::<P, F>::new`\u001b[0m\n\n"}
{"message":"the method `with_sd_tolerance` exists for struct `NelderMead<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, _>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/raw_svi.rs","byte_start":2085,"byte_end":2102,"line_start":72,"line_end":72,"column_start":2,"column_end":19,"is_primary":true,"text":[{"text":".with_sd_tolerance(0.0001)?;","highlight_start":2,"highlight_end":19}],"label":"method cannot be called on `NelderMead<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, _>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/lib.rs","byte_start":44962,"byte_end":44988,"line_start":1268,"line_end":1268,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct ArrayBase<S, D>","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `_: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/lib.rs","byte_start":44962,"byte_end":44988,"line_start":1268,"line_end":1268,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct ArrayBase<S, D>","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `_: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/lib.rs","byte_start":44962,"byte_end":44988,"line_start":1268,"line_end":1268,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"pub struct ArrayBase<S, D>","highlight_start":1,"highlight_end":27}],"label":"doesn't satisfy `_: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\n`ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\n`ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `with_sd_tolerance` exists for struct `NelderMead<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, _>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/raw_svi.rs:72:2\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m.with_sd_tolerance(0.0001)?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `NelderMead<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, _>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/jordyromuald/.cargo/registry/src/github.com-1ecc6299db9ec823/ndarray-0.15.6/src/lib.rs:1268:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ArrayBase<S, D>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `_: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m             `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminAdd<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\u001b[0m             `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminSub<ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\u001b[0m             `ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>: argmin_math::ArgminMul<_, ArrayBase<OwnedRepr<f64>, Dim<[usize; 1]>>>`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
